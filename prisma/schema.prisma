generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  admin
  editor
  reviewer
}

model DespachoSeccional {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  seccional      String
  nombre         String
  numero         Int
  usuariosIds    String[]       @db.ObjectId
  usuarios       User[]         @relation(fields: [usuariosIds], references: [id])
  calificaciones Calificacion[]
}

model User {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  username              String
  password              String
  passwordExpiresAt     DateTime
  sessions              Session[]
  roles                 UserRoles[]
  despachosSeccionalIds String[]            @db.ObjectId
  despachosSeccional    DespachoSeccional[] @relation(fields: [despachosSeccionalIds], references: [id])
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  expiresAt DateTime
  username  String
}

enum EspecialidadDespacho {
  Promiscuo
  Penal
  PenalAdolescentes
  PenalConocimiento
  PenalGarantias
  PenalMixto
  EjecucionPenas
  Civil
  Familia
  FamiliaPromiscuo
  Laboral
  Administrativo
}

enum CategoriaDespacho {
  Municipal
  Circuito
  Tribunal
}

model Despacho {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  codigo                String
  nombre                String
  numero                Int?
  especialidad          EspecialidadDespacho?
  categoria             CategoriaDespacho?
  municipio             String?
  distrito              String?
  registrosCalificacion RegistroCalificacion[]
  registrosAudiencias   RegistroAudiencias[]
  calificaciones        Calificacion[]
  novedadesFuncionarios NovedadFuncionario[]
}

model Funcionario {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  documento             String
  nombre                String
  novedades             NovedadFuncionario[]
  registrosCalificacion RegistroCalificacion[]
  calificaciones        Calificacion[]
  registrosAudiencias   RegistroAudiencias[]
}

model NovedadFuncionario {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  type             String
  from             DateTime     @db.Date
  to               DateTime     @db.Date
  days             Int
  diasDescontables Int          @default(0)
  notes            String
  despachoId       String       @db.ObjectId
  despacho         Despacho     @relation(fields: [despachoId], references: [id])
  funcionarioId    String?      @db.ObjectId
  funcionario      Funcionario? @relation(fields: [funcionarioId], references: [id], onDelete: Cascade)
}

enum ClaseRegistroCalificacion {
  oral
  constitucional
  escrito
  garantias
  otros
}

model RegistroAudiencias {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  periodo                 Int // A침o del registro
  despachoId              String         @db.ObjectId
  despacho                Despacho       @relation(fields: [despachoId], references: [id])
  funcionarioId           String         @db.ObjectId
  funcionario             Funcionario    @relation(fields: [funcionarioId], references: [id])
  programadas             Int
  atendidas               Int
  aplazadasAjenas         Int
  aplazadasJustificadas   Int
  aplazadasNoJustificadas Int
  calificacion            Calificacion[]

  @@unique([despachoId, funcionarioId, periodo])
}

model RegistroCalificacion {
  id                String                    @id @default(auto()) @map("_id") @db.ObjectId
  periodo           Int // A침o del registro
  despachoId        String                    @db.ObjectId
  despacho          Despacho                  @relation(fields: [despachoId], references: [id])
  funcionarioId     String                    @db.ObjectId
  funcionario       Funcionario               @relation(fields: [funcionarioId], references: [id])
  clase             ClaseRegistroCalificacion
  categoria         String
  desde             DateTime                  @db.Date
  hasta             DateTime                  @db.Date
  dias              Int?
  inventarioInicial Int
  ingresoEfectivo   Int
  cargaEfectiva     Int
  egresoEfectivo    Int
  conciliaciones    Int
  inventarioFinal   Int
  restan            Int
  calificacionId    String?                   @db.ObjectId
  calificacion      Calificacion?             @relation(fields: [calificacionId], references: [id], onDelete: Cascade)
}

model CalificacionSubfactor {
  id                               String                    @id @default(auto()) @map("_id") @db.ObjectId
  subfactor                        ClaseRegistroCalificacion
  totalInventarioInicial           Int
  cargaBaseCalificacionDespacho    Float
  cargaBaseCalificacionFuncionario Float
  egresoFuncionario                Int
  cargaProporcional                Float
  totalSubfactor                   Float
  calificacionId                   String?                   @db.ObjectId
  calificacion                     Calificacion?             @relation(fields: [calificacionId], references: [id], onDelete: Cascade)
}

enum EstadoCalificacion {
  borrador
  revision
  aprobada
}

model Calificacion {
  id                                String                  @id @default(auto()) @map("_id") @db.ObjectId
  estado                            EstadoCalificacion
  periodo                           Int // A침o del registro
  funcionarioId                     String                  @db.ObjectId
  funcionario                       Funcionario             @relation(fields: [funcionarioId], references: [id])
  despachoId                        String                  @db.ObjectId
  despacho                          Despacho                @relation(fields: [despachoId], references: [id])
  // despacho que aprueba la calificaci칩n
  despachoSeccionalId               String?                 @db.ObjectId
  despachoSeccional                 DespachoSeccional?      @relation(fields: [despachoSeccionalId], references: [id])
  cargaEfectivaTotal                Int                     @default(0)
  egresoEfectivoTotal               Int                     @default(0)
  diasHabilesDespacho               Int
  diasDescontados                   Int
  diasLaborados                     Int
  registrosConsolidados             RegistroCalificacion[] // registros con categoria "Consolidado"
  subfactores                       CalificacionSubfactor[]
  registroAudienciasId              String                  @db.ObjectId
  registroAudiencias                RegistroAudiencias      @relation(fields: [registroAudienciasId], references: [id])
  calificacionAudiencias            Float
  factorOralMasAudiencias           Float
  calificacionTotalFactorEficiencia Float
  calificacionPonderada             Float                   @default(0)

  @@unique([despachoId, funcionarioId, periodo])
}
